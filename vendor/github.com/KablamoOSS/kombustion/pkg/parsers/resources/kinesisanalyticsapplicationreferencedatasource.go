package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// KinesisAnalyticsApplicationReferenceDataSource Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalytics-applicationreferencedatasource.html
type KinesisAnalyticsApplicationReferenceDataSource struct {
	Type       string                                                   `yaml:"Type"`
	Properties KinesisAnalyticsApplicationReferenceDataSourceProperties `yaml:"Properties"`
	Condition  interface{}                                              `yaml:"Condition,omitempty"`
	Metadata   interface{}                                              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                                              `yaml:"DependsOn,omitempty"`
}

// KinesisAnalyticsApplicationReferenceDataSource Properties
type KinesisAnalyticsApplicationReferenceDataSourceProperties struct {
	ApplicationName     interface{}                                                   `yaml:"ApplicationName"`
	ReferenceDataSource *properties.ApplicationReferenceDataSourceReferenceDataSource `yaml:"ReferenceDataSource"`
}

// NewKinesisAnalyticsApplicationReferenceDataSource constructor creates a new KinesisAnalyticsApplicationReferenceDataSource
func NewKinesisAnalyticsApplicationReferenceDataSource(properties KinesisAnalyticsApplicationReferenceDataSourceProperties, deps ...interface{}) KinesisAnalyticsApplicationReferenceDataSource {
	return KinesisAnalyticsApplicationReferenceDataSource{
		Type:       "AWS::KinesisAnalytics::ApplicationReferenceDataSource",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseKinesisAnalyticsApplicationReferenceDataSource parses KinesisAnalyticsApplicationReferenceDataSource
func ParseKinesisAnalyticsApplicationReferenceDataSource(name string, data string) (cf types.TemplateObject, err error) {
	var resource KinesisAnalyticsApplicationReferenceDataSource
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: KinesisAnalyticsApplicationReferenceDataSource - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseKinesisAnalyticsApplicationReferenceDataSource validator
func (resource KinesisAnalyticsApplicationReferenceDataSource) Validate() []error {
	return resource.Properties.Validate()
}

// ParseKinesisAnalyticsApplicationReferenceDataSourceProperties validator
func (resource KinesisAnalyticsApplicationReferenceDataSourceProperties) Validate() []error {
	errs := []error{}
	if resource.ApplicationName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ApplicationName'"))
	}
	if resource.ReferenceDataSource == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ReferenceDataSource'"))
	} else {
		errs = append(errs, resource.ReferenceDataSource.Validate()...)
	}
	return errs
}
