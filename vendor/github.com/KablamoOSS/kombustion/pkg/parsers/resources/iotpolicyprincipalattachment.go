package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// IoTPolicyPrincipalAttachment Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-policyprincipalattachment.html
type IoTPolicyPrincipalAttachment struct {
	Type       string                                 `yaml:"Type"`
	Properties IoTPolicyPrincipalAttachmentProperties `yaml:"Properties"`
	Condition  interface{}                            `yaml:"Condition,omitempty"`
	Metadata   interface{}                            `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                            `yaml:"DependsOn,omitempty"`
}

// IoTPolicyPrincipalAttachment Properties
type IoTPolicyPrincipalAttachmentProperties struct {
	PolicyName interface{} `yaml:"PolicyName"`
	Principal  interface{} `yaml:"Principal"`
}

// NewIoTPolicyPrincipalAttachment constructor creates a new IoTPolicyPrincipalAttachment
func NewIoTPolicyPrincipalAttachment(properties IoTPolicyPrincipalAttachmentProperties, deps ...interface{}) IoTPolicyPrincipalAttachment {
	return IoTPolicyPrincipalAttachment{
		Type:       "AWS::IoT::PolicyPrincipalAttachment",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseIoTPolicyPrincipalAttachment parses IoTPolicyPrincipalAttachment
func ParseIoTPolicyPrincipalAttachment(name string, data string) (cf types.TemplateObject, err error) {
	var resource IoTPolicyPrincipalAttachment
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: IoTPolicyPrincipalAttachment - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseIoTPolicyPrincipalAttachment validator
func (resource IoTPolicyPrincipalAttachment) Validate() []error {
	return resource.Properties.Validate()
}

// ParseIoTPolicyPrincipalAttachmentProperties validator
func (resource IoTPolicyPrincipalAttachmentProperties) Validate() []error {
	errs := []error{}
	if resource.PolicyName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PolicyName'"))
	}
	if resource.Principal == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Principal'"))
	}
	return errs
}
