package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// GlueCrawler Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-crawler.html
type GlueCrawler struct {
	Type       string                `yaml:"Type"`
	Properties GlueCrawlerProperties `yaml:"Properties"`
	Condition  interface{}           `yaml:"Condition,omitempty"`
	Metadata   interface{}           `yaml:"Metadata,omitempty"`
	DependsOn  interface{}           `yaml:"DependsOn,omitempty"`
}

// GlueCrawler Properties
type GlueCrawlerProperties struct {
	DatabaseName       interface{}                           `yaml:"DatabaseName"`
	Description        interface{}                           `yaml:"Description,omitempty"`
	Name               interface{}                           `yaml:"Name,omitempty"`
	Role               interface{}                           `yaml:"Role"`
	TablePrefix        interface{}                           `yaml:"TablePrefix,omitempty"`
	Targets            *properties.CrawlerTargets            `yaml:"Targets"`
	SchemaChangePolicy *properties.CrawlerSchemaChangePolicy `yaml:"SchemaChangePolicy,omitempty"`
	Schedule           *properties.CrawlerSchedule           `yaml:"Schedule,omitempty"`
	Classifiers        interface{}                           `yaml:"Classifiers,omitempty"`
}

// NewGlueCrawler constructor creates a new GlueCrawler
func NewGlueCrawler(properties GlueCrawlerProperties, deps ...interface{}) GlueCrawler {
	return GlueCrawler{
		Type:       "AWS::Glue::Crawler",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueCrawler parses GlueCrawler
func ParseGlueCrawler(name string, data string) (cf types.TemplateObject, err error) {
	var resource GlueCrawler
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: GlueCrawler - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseGlueCrawler validator
func (resource GlueCrawler) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueCrawlerProperties validator
func (resource GlueCrawlerProperties) Validate() []error {
	errs := []error{}
	if resource.DatabaseName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'DatabaseName'"))
	}
	if resource.Role == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Role'"))
	}
	if resource.Targets == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Targets'"))
	} else {
		errs = append(errs, resource.Targets.Validate()...)
	}
	return errs
}
