package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// CodeDeployDeploymentGroup Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentgroup.html
type CodeDeployDeploymentGroup struct {
	Type       string                              `yaml:"Type"`
	Properties CodeDeployDeploymentGroupProperties `yaml:"Properties"`
	Condition  interface{}                         `yaml:"Condition,omitempty"`
	Metadata   interface{}                         `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                         `yaml:"DependsOn,omitempty"`
}

// CodeDeployDeploymentGroup Properties
type CodeDeployDeploymentGroupProperties struct {
	ApplicationName              interface{}                                          `yaml:"ApplicationName"`
	DeploymentConfigName         interface{}                                          `yaml:"DeploymentConfigName,omitempty"`
	DeploymentGroupName          interface{}                                          `yaml:"DeploymentGroupName,omitempty"`
	ServiceRoleArn               interface{}                                          `yaml:"ServiceRoleArn"`
	LoadBalancerInfo             *properties.DeploymentGroupLoadBalancerInfo          `yaml:"LoadBalancerInfo,omitempty"`
	OnPremisesInstanceTagFilters interface{}                                          `yaml:"OnPremisesInstanceTagFilters,omitempty"`
	AutoScalingGroups            interface{}                                          `yaml:"AutoScalingGroups,omitempty"`
	Ec2TagFilters                interface{}                                          `yaml:"Ec2TagFilters,omitempty"`
	TriggerConfigurations        interface{}                                          `yaml:"TriggerConfigurations,omitempty"`
	DeploymentStyle              *properties.DeploymentGroupDeploymentStyle           `yaml:"DeploymentStyle,omitempty"`
	Deployment                   *properties.DeploymentGroupDeployment                `yaml:"Deployment,omitempty"`
	AutoRollbackConfiguration    *properties.DeploymentGroupAutoRollbackConfiguration `yaml:"AutoRollbackConfiguration,omitempty"`
	AlarmConfiguration           *properties.DeploymentGroupAlarmConfiguration        `yaml:"AlarmConfiguration,omitempty"`
}

// NewCodeDeployDeploymentGroup constructor creates a new CodeDeployDeploymentGroup
func NewCodeDeployDeploymentGroup(properties CodeDeployDeploymentGroupProperties, deps ...interface{}) CodeDeployDeploymentGroup {
	return CodeDeployDeploymentGroup{
		Type:       "AWS::CodeDeploy::DeploymentGroup",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseCodeDeployDeploymentGroup parses CodeDeployDeploymentGroup
func ParseCodeDeployDeploymentGroup(name string, data string) (cf types.TemplateObject, err error) {
	var resource CodeDeployDeploymentGroup
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: CodeDeployDeploymentGroup - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseCodeDeployDeploymentGroup validator
func (resource CodeDeployDeploymentGroup) Validate() []error {
	return resource.Properties.Validate()
}

// ParseCodeDeployDeploymentGroupProperties validator
func (resource CodeDeployDeploymentGroupProperties) Validate() []error {
	errs := []error{}
	if resource.ApplicationName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ApplicationName'"))
	}
	if resource.ServiceRoleArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ServiceRoleArn'"))
	}
	return errs
}
