package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SNSTopicPolicy Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-policy.html
type SNSTopicPolicy struct {
	Type       string                   `yaml:"Type"`
	Properties SNSTopicPolicyProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// SNSTopicPolicy Properties
type SNSTopicPolicyProperties struct {
	PolicyDocument interface{} `yaml:"PolicyDocument"`
	Topics         interface{} `yaml:"Topics"`
}

// NewSNSTopicPolicy constructor creates a new SNSTopicPolicy
func NewSNSTopicPolicy(properties SNSTopicPolicyProperties, deps ...interface{}) SNSTopicPolicy {
	return SNSTopicPolicy{
		Type:       "AWS::SNS::TopicPolicy",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSNSTopicPolicy parses SNSTopicPolicy
func ParseSNSTopicPolicy(name string, data string) (cf types.TemplateObject, err error) {
	var resource SNSTopicPolicy
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SNSTopicPolicy - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSNSTopicPolicy validator
func (resource SNSTopicPolicy) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSNSTopicPolicyProperties validator
func (resource SNSTopicPolicyProperties) Validate() []error {
	errs := []error{}
	if resource.PolicyDocument == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PolicyDocument'"))
	}
	if resource.Topics == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Topics'"))
	}
	return errs
}
