package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// BatchComputeEnvironment Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html
type BatchComputeEnvironment struct {
	Type       string                            `yaml:"Type"`
	Properties BatchComputeEnvironmentProperties `yaml:"Properties"`
	Condition  interface{}                       `yaml:"Condition,omitempty"`
	Metadata   interface{}                       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                       `yaml:"DependsOn,omitempty"`
}

// BatchComputeEnvironment Properties
type BatchComputeEnvironmentProperties struct {
	ComputeEnvironmentName interface{}                                    `yaml:"ComputeEnvironmentName,omitempty"`
	ServiceRole            interface{}                                    `yaml:"ServiceRole"`
	State                  interface{}                                    `yaml:"State,omitempty"`
	Type                   interface{}                                    `yaml:"Type"`
	ComputeResources       *properties.ComputeEnvironmentComputeResources `yaml:"ComputeResources"`
}

// NewBatchComputeEnvironment constructor creates a new BatchComputeEnvironment
func NewBatchComputeEnvironment(properties BatchComputeEnvironmentProperties, deps ...interface{}) BatchComputeEnvironment {
	return BatchComputeEnvironment{
		Type:       "AWS::Batch::ComputeEnvironment",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseBatchComputeEnvironment parses BatchComputeEnvironment
func ParseBatchComputeEnvironment(name string, data string) (cf types.TemplateObject, err error) {
	var resource BatchComputeEnvironment
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: BatchComputeEnvironment - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseBatchComputeEnvironment validator
func (resource BatchComputeEnvironment) Validate() []error {
	return resource.Properties.Validate()
}

// ParseBatchComputeEnvironmentProperties validator
func (resource BatchComputeEnvironmentProperties) Validate() []error {
	errs := []error{}
	if resource.ServiceRole == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ServiceRole'"))
	}
	if resource.Type == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Type'"))
	}
	if resource.ComputeResources == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ComputeResources'"))
	} else {
		errs = append(errs, resource.ComputeResources.Validate()...)
	}
	return errs
}
