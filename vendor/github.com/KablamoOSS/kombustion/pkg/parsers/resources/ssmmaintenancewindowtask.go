package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SSMMaintenanceWindowTask Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-maintenancewindowtask.html
type SSMMaintenanceWindowTask struct {
	Type       string                             `yaml:"Type"`
	Properties SSMMaintenanceWindowTaskProperties `yaml:"Properties"`
	Condition  interface{}                        `yaml:"Condition,omitempty"`
	Metadata   interface{}                        `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                        `yaml:"DependsOn,omitempty"`
}

// SSMMaintenanceWindowTask Properties
type SSMMaintenanceWindowTaskProperties struct {
	Description              interface{}                                               `yaml:"Description,omitempty"`
	MaxConcurrency           interface{}                                               `yaml:"MaxConcurrency"`
	MaxErrors                interface{}                                               `yaml:"MaxErrors"`
	Name                     interface{}                                               `yaml:"Name,omitempty"`
	Priority                 interface{}                                               `yaml:"Priority"`
	ServiceRoleArn           interface{}                                               `yaml:"ServiceRoleArn"`
	TaskArn                  interface{}                                               `yaml:"TaskArn"`
	TaskParameters           interface{}                                               `yaml:"TaskParameters,omitempty"`
	TaskType                 interface{}                                               `yaml:"TaskType"`
	WindowId                 interface{}                                               `yaml:"WindowId,omitempty"`
	TaskInvocationParameters *properties.MaintenanceWindowTaskTaskInvocationParameters `yaml:"TaskInvocationParameters,omitempty"`
	LoggingInfo              *properties.MaintenanceWindowTaskLoggingInfo              `yaml:"LoggingInfo,omitempty"`
	Targets                  interface{}                                               `yaml:"Targets"`
}

// NewSSMMaintenanceWindowTask constructor creates a new SSMMaintenanceWindowTask
func NewSSMMaintenanceWindowTask(properties SSMMaintenanceWindowTaskProperties, deps ...interface{}) SSMMaintenanceWindowTask {
	return SSMMaintenanceWindowTask{
		Type:       "AWS::SSM::MaintenanceWindowTask",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSSMMaintenanceWindowTask parses SSMMaintenanceWindowTask
func ParseSSMMaintenanceWindowTask(name string, data string) (cf types.TemplateObject, err error) {
	var resource SSMMaintenanceWindowTask
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SSMMaintenanceWindowTask - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSSMMaintenanceWindowTask validator
func (resource SSMMaintenanceWindowTask) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSSMMaintenanceWindowTaskProperties validator
func (resource SSMMaintenanceWindowTaskProperties) Validate() []error {
	errs := []error{}
	if resource.MaxConcurrency == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'MaxConcurrency'"))
	}
	if resource.MaxErrors == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'MaxErrors'"))
	}
	if resource.Priority == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Priority'"))
	}
	if resource.ServiceRoleArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ServiceRoleArn'"))
	}
	if resource.TaskArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'TaskArn'"))
	}
	if resource.TaskType == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'TaskType'"))
	}
	if resource.Targets == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Targets'"))
	}
	return errs
}
