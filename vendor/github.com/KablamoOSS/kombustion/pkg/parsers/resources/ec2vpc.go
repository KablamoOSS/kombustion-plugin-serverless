package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// EC2VPC Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
type EC2VPC struct {
	Type       string           `yaml:"Type"`
	Properties EC2VPCProperties `yaml:"Properties"`
	Condition  interface{}      `yaml:"Condition,omitempty"`
	Metadata   interface{}      `yaml:"Metadata,omitempty"`
	DependsOn  interface{}      `yaml:"DependsOn,omitempty"`
}

// EC2VPC Properties
type EC2VPCProperties struct {
	CidrBlock          interface{} `yaml:"CidrBlock"`
	EnableDnsHostnames interface{} `yaml:"EnableDnsHostnames,omitempty"`
	EnableDnsSupport   interface{} `yaml:"EnableDnsSupport,omitempty"`
	InstanceTenancy    interface{} `yaml:"InstanceTenancy,omitempty"`
	Tags               interface{} `yaml:"Tags,omitempty"`
}

// NewEC2VPC constructor creates a new EC2VPC
func NewEC2VPC(properties EC2VPCProperties, deps ...interface{}) EC2VPC {
	return EC2VPC{
		Type:       "AWS::EC2::VPC",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2VPC parses EC2VPC
func ParseEC2VPC(name string, data string) (cf types.TemplateObject, err error) {
	var resource EC2VPC
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: EC2VPC - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseEC2VPC validator
func (resource EC2VPC) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2VPCProperties validator
func (resource EC2VPCProperties) Validate() []error {
	errs := []error{}
	if resource.CidrBlock == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'CidrBlock'"))
	}
	return errs
}
