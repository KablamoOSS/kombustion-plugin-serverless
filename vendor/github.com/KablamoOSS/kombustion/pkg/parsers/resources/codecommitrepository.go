package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// CodeCommitRepository Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html
type CodeCommitRepository struct {
	Type       string                         `yaml:"Type"`
	Properties CodeCommitRepositoryProperties `yaml:"Properties"`
	Condition  interface{}                    `yaml:"Condition,omitempty"`
	Metadata   interface{}                    `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                    `yaml:"DependsOn,omitempty"`
}

// CodeCommitRepository Properties
type CodeCommitRepositoryProperties struct {
	RepositoryDescription interface{} `yaml:"RepositoryDescription,omitempty"`
	RepositoryName        interface{} `yaml:"RepositoryName"`
	Triggers              interface{} `yaml:"Triggers,omitempty"`
}

// NewCodeCommitRepository constructor creates a new CodeCommitRepository
func NewCodeCommitRepository(properties CodeCommitRepositoryProperties, deps ...interface{}) CodeCommitRepository {
	return CodeCommitRepository{
		Type:       "AWS::CodeCommit::Repository",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseCodeCommitRepository parses CodeCommitRepository
func ParseCodeCommitRepository(name string, data string) (cf types.TemplateObject, err error) {
	var resource CodeCommitRepository
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: CodeCommitRepository - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseCodeCommitRepository validator
func (resource CodeCommitRepository) Validate() []error {
	return resource.Properties.Validate()
}

// ParseCodeCommitRepositoryProperties validator
func (resource CodeCommitRepositoryProperties) Validate() []error {
	errs := []error{}
	if resource.RepositoryName == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'RepositoryName'"))
	}
	return errs
}
