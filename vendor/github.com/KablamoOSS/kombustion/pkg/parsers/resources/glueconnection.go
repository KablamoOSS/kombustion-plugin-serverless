package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// GlueConnection Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-connection.html
type GlueConnection struct {
	Type       string                   `yaml:"Type"`
	Properties GlueConnectionProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// GlueConnection Properties
type GlueConnectionProperties struct {
	CatalogId       interface{}                           `yaml:"CatalogId"`
	ConnectionInput *properties.ConnectionConnectionInput `yaml:"ConnectionInput"`
}

// NewGlueConnection constructor creates a new GlueConnection
func NewGlueConnection(properties GlueConnectionProperties, deps ...interface{}) GlueConnection {
	return GlueConnection{
		Type:       "AWS::Glue::Connection",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGlueConnection parses GlueConnection
func ParseGlueConnection(name string, data string) (cf types.TemplateObject, err error) {
	var resource GlueConnection
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: GlueConnection - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseGlueConnection validator
func (resource GlueConnection) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGlueConnectionProperties validator
func (resource GlueConnectionProperties) Validate() []error {
	errs := []error{}
	if resource.CatalogId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'CatalogId'"))
	}
	if resource.ConnectionInput == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'ConnectionInput'"))
	} else {
		errs = append(errs, resource.ConnectionInput.Validate()...)
	}
	return errs
}
