package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// RDSEventSubscription Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-eventsubscription.html
type RDSEventSubscription struct {
	Type       string                         `yaml:"Type"`
	Properties RDSEventSubscriptionProperties `yaml:"Properties"`
	Condition  interface{}                    `yaml:"Condition,omitempty"`
	Metadata   interface{}                    `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                    `yaml:"DependsOn,omitempty"`
}

// RDSEventSubscription Properties
type RDSEventSubscriptionProperties struct {
	Enabled         interface{} `yaml:"Enabled,omitempty"`
	SnsTopicArn     interface{} `yaml:"SnsTopicArn"`
	SourceType      interface{} `yaml:"SourceType,omitempty"`
	EventCategories interface{} `yaml:"EventCategories,omitempty"`
	SourceIds       interface{} `yaml:"SourceIds,omitempty"`
}

// NewRDSEventSubscription constructor creates a new RDSEventSubscription
func NewRDSEventSubscription(properties RDSEventSubscriptionProperties, deps ...interface{}) RDSEventSubscription {
	return RDSEventSubscription{
		Type:       "AWS::RDS::EventSubscription",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseRDSEventSubscription parses RDSEventSubscription
func ParseRDSEventSubscription(name string, data string) (cf types.TemplateObject, err error) {
	var resource RDSEventSubscription
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: RDSEventSubscription - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseRDSEventSubscription validator
func (resource RDSEventSubscription) Validate() []error {
	return resource.Properties.Validate()
}

// ParseRDSEventSubscriptionProperties validator
func (resource RDSEventSubscriptionProperties) Validate() []error {
	errs := []error{}
	if resource.SnsTopicArn == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'SnsTopicArn'"))
	}
	return errs
}
