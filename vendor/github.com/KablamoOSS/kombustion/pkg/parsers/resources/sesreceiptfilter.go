package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// SESReceiptFilter Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptfilter.html
type SESReceiptFilter struct {
	Type       string                     `yaml:"Type"`
	Properties SESReceiptFilterProperties `yaml:"Properties"`
	Condition  interface{}                `yaml:"Condition,omitempty"`
	Metadata   interface{}                `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                `yaml:"DependsOn,omitempty"`
}

// SESReceiptFilter Properties
type SESReceiptFilterProperties struct {
	Filter *properties.ReceiptFilterFilter `yaml:"Filter"`
}

// NewSESReceiptFilter constructor creates a new SESReceiptFilter
func NewSESReceiptFilter(properties SESReceiptFilterProperties, deps ...interface{}) SESReceiptFilter {
	return SESReceiptFilter{
		Type:       "AWS::SES::ReceiptFilter",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseSESReceiptFilter parses SESReceiptFilter
func ParseSESReceiptFilter(name string, data string) (cf types.TemplateObject, err error) {
	var resource SESReceiptFilter
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: SESReceiptFilter - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseSESReceiptFilter validator
func (resource SESReceiptFilter) Validate() []error {
	return resource.Properties.Validate()
}

// ParseSESReceiptFilterProperties validator
func (resource SESReceiptFilterProperties) Validate() []error {
	errs := []error{}
	if resource.Filter == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Filter'"))
	} else {
		errs = append(errs, resource.Filter.Validate()...)
	}
	return errs
}
