package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// IAMUser Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html
type IAMUser struct {
	Type       string            `yaml:"Type"`
	Properties IAMUserProperties `yaml:"Properties"`
	Condition  interface{}       `yaml:"Condition,omitempty"`
	Metadata   interface{}       `yaml:"Metadata,omitempty"`
	DependsOn  interface{}       `yaml:"DependsOn,omitempty"`
}

// IAMUser Properties
type IAMUserProperties struct {
	Path              interface{}                  `yaml:"Path,omitempty"`
	UserName          interface{}                  `yaml:"UserName,omitempty"`
	LoginProfile      *properties.UserLoginProfile `yaml:"LoginProfile,omitempty"`
	Groups            interface{}                  `yaml:"Groups,omitempty"`
	ManagedPolicyArns interface{}                  `yaml:"ManagedPolicyArns,omitempty"`
	Policies          interface{}                  `yaml:"Policies,omitempty"`
}

// NewIAMUser constructor creates a new IAMUser
func NewIAMUser(properties IAMUserProperties, deps ...interface{}) IAMUser {
	return IAMUser{
		Type:       "AWS::IAM::User",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseIAMUser parses IAMUser
func ParseIAMUser(name string, data string) (cf types.TemplateObject, err error) {
	var resource IAMUser
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: IAMUser - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseIAMUser validator
func (resource IAMUser) Validate() []error {
	return resource.Properties.Validate()
}

// ParseIAMUserProperties validator
func (resource IAMUserProperties) Validate() []error {
	errs := []error{}
	return errs
}
