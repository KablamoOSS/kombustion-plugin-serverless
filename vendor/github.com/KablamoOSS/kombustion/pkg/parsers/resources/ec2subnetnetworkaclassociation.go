package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// EC2SubnetNetworkAclAssociation Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-network-acl-assoc.html
type EC2SubnetNetworkAclAssociation struct {
	Type       string                                   `yaml:"Type"`
	Properties EC2SubnetNetworkAclAssociationProperties `yaml:"Properties"`
	Condition  interface{}                              `yaml:"Condition,omitempty"`
	Metadata   interface{}                              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}                              `yaml:"DependsOn,omitempty"`
}

// EC2SubnetNetworkAclAssociation Properties
type EC2SubnetNetworkAclAssociationProperties struct {
	NetworkAclId interface{} `yaml:"NetworkAclId"`
	SubnetId     interface{} `yaml:"SubnetId"`
}

// NewEC2SubnetNetworkAclAssociation constructor creates a new EC2SubnetNetworkAclAssociation
func NewEC2SubnetNetworkAclAssociation(properties EC2SubnetNetworkAclAssociationProperties, deps ...interface{}) EC2SubnetNetworkAclAssociation {
	return EC2SubnetNetworkAclAssociation{
		Type:       "AWS::EC2::SubnetNetworkAclAssociation",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseEC2SubnetNetworkAclAssociation parses EC2SubnetNetworkAclAssociation
func ParseEC2SubnetNetworkAclAssociation(name string, data string) (cf types.TemplateObject, err error) {
	var resource EC2SubnetNetworkAclAssociation
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: EC2SubnetNetworkAclAssociation - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseEC2SubnetNetworkAclAssociation validator
func (resource EC2SubnetNetworkAclAssociation) Validate() []error {
	return resource.Properties.Validate()
}

// ParseEC2SubnetNetworkAclAssociationProperties validator
func (resource EC2SubnetNetworkAclAssociationProperties) Validate() []error {
	errs := []error{}
	if resource.NetworkAclId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'NetworkAclId'"))
	}
	if resource.SubnetId == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'SubnetId'"))
	}
	return errs
}
