package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// S3BucketPolicy Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
type S3BucketPolicy struct {
	Type       string                   `yaml:"Type"`
	Properties S3BucketPolicyProperties `yaml:"Properties"`
	Condition  interface{}              `yaml:"Condition,omitempty"`
	Metadata   interface{}              `yaml:"Metadata,omitempty"`
	DependsOn  interface{}              `yaml:"DependsOn,omitempty"`
}

// S3BucketPolicy Properties
type S3BucketPolicyProperties struct {
	Bucket         interface{} `yaml:"Bucket"`
	PolicyDocument interface{} `yaml:"PolicyDocument"`
}

// NewS3BucketPolicy constructor creates a new S3BucketPolicy
func NewS3BucketPolicy(properties S3BucketPolicyProperties, deps ...interface{}) S3BucketPolicy {
	return S3BucketPolicy{
		Type:       "AWS::S3::BucketPolicy",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseS3BucketPolicy parses S3BucketPolicy
func ParseS3BucketPolicy(name string, data string) (cf types.TemplateObject, err error) {
	var resource S3BucketPolicy
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: S3BucketPolicy - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseS3BucketPolicy validator
func (resource S3BucketPolicy) Validate() []error {
	return resource.Properties.Validate()
}

// ParseS3BucketPolicyProperties validator
func (resource S3BucketPolicyProperties) Validate() []error {
	errs := []error{}
	if resource.Bucket == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Bucket'"))
	}
	if resource.PolicyDocument == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'PolicyDocument'"))
	}
	return errs
}
