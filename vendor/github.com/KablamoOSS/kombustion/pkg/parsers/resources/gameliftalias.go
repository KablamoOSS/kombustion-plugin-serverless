package resources

// DO NOT EDIT: This file is autogenerated by running 'go generate'
// It's generated by "github.com/KablamoOSS/kombustion/generate"

import (
	"fmt"
	"github.com/KablamoOSS/kombustion/pkg/parsers/properties"
	"github.com/KablamoOSS/kombustion/types"
	yaml "github.com/KablamoOSS/yaml"
	"log"
)

// GameLiftAlias Documentation: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-alias.html
type GameLiftAlias struct {
	Type       string                  `yaml:"Type"`
	Properties GameLiftAliasProperties `yaml:"Properties"`
	Condition  interface{}             `yaml:"Condition,omitempty"`
	Metadata   interface{}             `yaml:"Metadata,omitempty"`
	DependsOn  interface{}             `yaml:"DependsOn,omitempty"`
}

// GameLiftAlias Properties
type GameLiftAliasProperties struct {
	Description     interface{}                      `yaml:"Description,omitempty"`
	Name            interface{}                      `yaml:"Name"`
	RoutingStrategy *properties.AliasRoutingStrategy `yaml:"RoutingStrategy"`
}

// NewGameLiftAlias constructor creates a new GameLiftAlias
func NewGameLiftAlias(properties GameLiftAliasProperties, deps ...interface{}) GameLiftAlias {
	return GameLiftAlias{
		Type:       "AWS::GameLift::Alias",
		Properties: properties,
		DependsOn:  deps,
	}
}

// ParseGameLiftAlias parses GameLiftAlias
func ParseGameLiftAlias(name string, data string) (cf types.TemplateObject, err error) {
	var resource GameLiftAlias
	if err = yaml.Unmarshal([]byte(data), &resource); err != nil {
		return
	}
	if errs := resource.Properties.Validate(); len(errs) > 0 {
		for _, err = range errs {
			log.Println("WARNING: GameLiftAlias - ", err)
		}
		return
	}
	cf = types.TemplateObject{name: resource}
	return
}

// ParseGameLiftAlias validator
func (resource GameLiftAlias) Validate() []error {
	return resource.Properties.Validate()
}

// ParseGameLiftAliasProperties validator
func (resource GameLiftAliasProperties) Validate() []error {
	errs := []error{}
	if resource.Name == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'Name'"))
	}
	if resource.RoutingStrategy == nil {
		errs = append(errs, fmt.Errorf("Missing required field 'RoutingStrategy'"))
	} else {
		errs = append(errs, resource.RoutingStrategy.Validate()...)
	}
	return errs
}
